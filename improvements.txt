While checking the code under test, several anomalies/issues arose:

NOTE: The lack of a framework being used here will not be taken as an issue. Great code can be written without a FW, as long as good OOP practices are used. Specifically regarding "index.php" file, a composer autoload would be useful to not require too many files as now. (See link at the bottom)

Issues found:
------------

For all classes: 
    1) Names should be capitalized and following PSR-2 style.

- Index.php:
    1) Using a psr-4 autoload as composer allows would help not to require a long list of files.
    2) A Factory to create different types of cards will be useful to have a common creation point (See example in link at the end)
    3) Create a CardController to execute the creation (Via a "create()" method) of different types and amount of cards, to not have the for loop spreaded in the file, and being repeated (Lines 14 to 26).
    4) Part of teh text is hardcoded with "Pack ", which should be a constant (If apply) or a variable for every different type of card/pack according to the business rules.
    5) Print statement should also be in the previously mentioned controller, for it to handle it.
    6) Also, hardcoded text in the print.
    7) The function "mk_rnd_greyscale()" is scattered in the file, without explicitly being bound to any model, so it's hard to realize who, how and when has to be used. A meaningful name more related to the business will be helpful, and has to be protected, not public.

- Cards classes:
    1) For starting, the "minicard" & "businesscard" classes has no purpose at all, as they are just cards that could be instantiated with different values. This means, the only thing that changes are a fixed set of values, not any single structure change, so the inheritance is wrong, as it's NOT a subtype.
    2) An abstract class should be implemented with the common structure and functionality between "card" & "businesscard", to avoid repetition of code like now.
    3) Use more meaningful names for the attributes ("width" instead of "w"), so the comments will be unnecesaries.
    4) A main class comment with an explanation about the business role of that card
    5) Camel case names according to up to date PSR standards.
    6) Render method is fixed, which will be hard to change if neccesary. The solution is to create an interface with a "render" method, then a "CardRenderer" that implements that method, and finally, via dependency injection, set a "CardRenderer" to the card that will take care of render a card in any way, easily interchangeable (Even better, that way we can create a group of strategies with different render methods!!)

- Pack:
    1) $array attribute should have a meaningful name
    2) Same, "bgSort()" should be implemented as explained before for the "render" method
